name: Refresh Data and Release

# 1. Run scrape from item-version-scrape
#   - Output to dist/Data.lua and upload artifact
#   - If cache has been updated, make a commit and push it back to save progress
# 2. On release branch, download new Data.lua artifact, and commit and push it.
#    (This is intentionally not done on master branch -- master branch has a
#    different lifecycle than the weekly data refreshes. master branch is where
#    we do development, and we don't want master's possibly-unfinished things to
#    be auto-merged into release branch every week.)
# 3. Run release workflow (see release.yml)
#
# This workflow is done automatically on Tuesdays at 16:00 UTC (1 hour after wow
# weekly reset), or by manual workflow_dispatch.
#
# This workflow requires a secret `ITEM_VERSION_SCRAPE_PAT` to be set up in the
# repository. This should be a personal access token created at
# <https://github.com/settings/tokens> with the following permissions:
#  - Repository access: t-mart/item-version-scrape
#  - Repositiory permissions
#    - Contents: Read and write
# It may need to be periodically regenerated if it expires, but you should get
# an email before it happens.

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "The type of wap release to perform (or none at all)"
        type: choice
        options:
          - "none"
          - "alpha"
          - "beta"
          - "release"
        required: true
        default: "release"
  schedule:
    # 16:20 UTC is roughly 1 hour after weekly reset. We choose a non-round time
    # because "High load times include the start of every hour. If the load is
    # sufficiently high enough, some queued jobs may be dropped."
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
    # - cron: "20 16 * * 2"
    - cron: "5 7 * * *" # test

jobs:
  scrape:
    name: Scrape
    runs-on: ubuntu-latest
    env:
      item_version_scrape_ref: master
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ env.item_version_scrape_ref }}
        repository: t-mart/item-version-scrape
        token: ${{ secrets.ITEM_VERSION_SCRAPE_PAT }}

    - name: Install Poetry
      run: |
        pipx install poetry

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: "poetry"

    - name: Install dependencies
      run: |
        poetry install

    - name: Scrape
      run: |
        poetry run ivs scrape

    - uses: actions/upload-artifact@v4
      with:
        name: Data.lua
        path: dist/Data.lua

    - name: Check if cache updated
      id: cache-updated
      run: |
        CACHE_UPDATED=$(git diff --exit-code --quiet ./cache && echo "false" || echo "true")
        echo "cache_updated=${CACHE_UPDATED}" >> ${GITHUB_OUTPUT}

    - name: Commit if needed
      if: steps.cache-updated.outputs.cache_updated == 'true'
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git add ./cache
        git commit -m "Update cache"
        git push origin "${{ env.item_version_scrape_ref }}"

  commit:
    name: Commit new item data
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: scrape
    env:
      release_ref: release
    steps:
    - name: Checkout addon code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.release_ref }}

    - name: Clear old data
      run: |
        rm ItemVersion/Data.lua

    - name: Download generated lua artifact
      uses: actions/download-artifact@v4
      with:
        name: Data.lua
        path: ItemVersion/

    - name: Commit & Push
      shell: bash
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git add ItemVersion/Data.lua
        git commit -m "Refresh item data"
        git push origin "${{ env.release_ref }}"

  release:
    needs: commit
    uses: ./.github/workflows/release.yml
    with:
      release-type: ${{ inputs.release-type }}
    secrets: inherit
