name: Release

# On release branch:
# 1. Add a version bump commit
# 2. Tag it
# 3. wap build/publish the addon
# 4. Make a GH release (with the addon file)
# 5. Merge it back to master branch (so that the two branches stay in sync)
#
# This workflow doesn't run on its own -- its called by other workflows that have put something
# releaseable on release branch (refresh-data.yml or merge-master.yml)

on:
  workflow_call:
    inputs:
      release-type:
        type: string
        required: true
    secrets:
      GH_PAT:
        required: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: release
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0  # ensure git knows about shared history between release and master

    # TODO: generate binaries on nextver release page and just use those (with binstall?)
    - name: Install nextver
      shell: bash
      run: |
        cargo install nextver

    - name: Determine next version
      id: next-version
      shell: bash
      run: |
        LAST_VERSION=$(jq <"wap.json" ".version" --raw-output)
        echo "Last version was ${LAST_VERSION}"
        NEXT_VERSION=$(nextver next ${LAST_VERSION} --format "<YYYY>.<0W>.<PATCH>" --sem-level patch)
        echo "Next version is ${NEXT_VERSION}"
        echo "version=${NEXT_VERSION}" >> ${GITHUB_OUTPUT}

    - name: Update wap.json version
      shell: bash
      run: |
        jq  ".version = \"${NEXT_VERSION}\"" <wap.json >wap-next.json
        mv wap-next.json wap.json
      env:
        NEXT_VERSION: "${{ steps.next-version.outputs.version }}"

    - name: Git Config
      shell: bash
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

    - name: Git Commit & Tag
      shell: bash
      run: |
        git add wap.json
        git commit -m "Release ${NEXT_VERSION}"
        git tag -a "${NEXT_VERSION}" -m "Release ${NEXT_VERSION}"
      env:
        NEXT_VERSION: "${{ steps.next-version.outputs.version }}"

    - name: Git Push
      shell: bash
      run: |
        git push --atomic origin release "${NEXT_VERSION}"
      env:
        NEXT_VERSION: "${{ steps.next-version.outputs.version }}"

    - name: wap
      uses: t-mart/wap-action@master
      with:
        release-type: ${{ inputs.release-type }}
        curseforge-token: ${{ secrets.CF_API_KEY }}

    - name: GH Release
      run: |
        gh release create --generate-notes "${NEXT_VERSION}" dist/*.zip
      env:
        NEXT_VERSION: "${{ steps.next-version.outputs.version }}"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Merge back into master
      run: |
        git checkout master
        git merge release
        git push origin master
