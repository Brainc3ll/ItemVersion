name: Release

# On release branch:
# 1. Add a version bump commit
# 2. Tag it
# 3. wap build/publish the addon
# 4. Make a GH release (with the addon file)
# 5. Merge it back to master branch (so that the two branches stay in sync)
#
# This workflow doesn't run on its own -- its called by other workflows that have put something
# releaseable on release branch (refresh-data.yml or merge-master.yml)

on:
  workflow_call:
    inputs:
      release-type:
        type: string
        required: true

jobs:
  release:
    name: Release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: release
        fetch-depth: 0  # ensure git knows about shared history between release and master
    
    - name: Get binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install support tooling
      run: |
        # nextver bumps our versions
        cargo binstall nextver --no-confirm

        # wownow gives current wow versions
        cargo binstall wownow --no-confirm

    - name: Determine next version
      id: next-version
      run: |
        LAST_VERSION="$(jq -r <wap.json '.version')"
        echo "::notice title=Last Version::${LAST_VERSION}"

        NEXT_VERSION=$(nextver next ${LAST_VERSION} --format "<YYYY>.<0W>.<PATCH>" --sem-level patch)
        echo "::notice title=Next Version::${NEXT_VERSION}"
        echo "version=${NEXT_VERSION}" >> ${GITHUB_OUTPUT}

    - name: Determine current wow versions
      id: wow-versions
      run: |
        wownow >wownow.json

        function get_version_by_product() {
          local output=$(jq -r --arg product "$1" '.[] | select(.product == $product) | .version' < wownow.json)
          if [[ -z $output ]]; then
            echo "No version found for product: $1, possible error with this function or wownow output"
            exit 1
          else
            echo "$output"
          fi
        }

        MAINLINE="$(get_version_by_product "wow")"
        echo "::notice title=Current Mainline Version::${MAINLINE}"
        echo "mainline=${MAINLINE}" >> ${GITHUB_OUTPUT}

        WRATH="$(get_version_by_product "wow_classic")"
        echo "::notice title=Current Wrath Version::${WRATH}"
        echo "wrath=${WRATH}" >> ${GITHUB_OUTPUT}

        VANILLA="$(get_version_by_product "wow_classic_era")"
        echo "::notice title=Current Vanilla Version::${VANILLA}"
        echo "vanilla=${VANILLA}" >> ${GITHUB_OUTPUT}

        rm wownow.json

    - name: Update wap.json version
      run: |
        jq \
          --arg nextVersion "${{ steps.next-version.outputs.version }}" \
          --arg mainline "${{ steps.wow-versions.outputs.mainline }}" \
          --arg wrath "${{ steps.wow-versions.outputs.wrath }}" \
          --arg vanilla "${{ steps.wow-versions.outputs.vanilla }}" \
          '.version = $nextVersion | .wowVersions.mainline = $mainline | .wowVersions.wrath = $wrath | .wowVersions.vanilla = $vanilla' \
          <wap.json >wap-next.json
        mv wap-next.json wap.json

    - name: Git Commit, Tag, and Push
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

        git add wap.json
        git commit -m "Release ${NEXT_VERSION}"

        git tag -a "${NEXT_VERSION}" -m "Release ${NEXT_VERSION}"

        git push --atomic origin release "${NEXT_VERSION}"
      env:
        NEXT_VERSION: "${{ steps.next-version.outputs.version }}"

    - name: wap
      uses: t-mart/wap-action@master
      with:
        release-type: ${{ inputs.release-type }}
        curseforge-token: ${{ secrets.CF_API_KEY }}

    - name: GH Release
      env:
        GH_TOKEN: ${{ github.token }}
        NEXT_VERSION: "${{ steps.next-version.outputs.version }}"
      run: |
        gh release create --generate-notes "${NEXT_VERSION}" dist/*.zip

    - name: Merge back into master
      run: |
        git checkout master
        git merge release
        git push origin master
